@model PagedResult<EnFoco_new.Models.Notice>
@using System.ComponentModel.DataAnnotations

@{
    ViewData["Title"] = "ENFOCO";
    var searchTerm = Context.Request.Query["searchTerm"];
    var selectedCategory = Context.Request.Query["category"];
    var categories = Enum.GetValues(typeof(NoticeCategory)).Cast<NoticeCategory>();
}

<div class="z-n1 align-content-center d-flex">
    <img class="banner" src="~/img/BANNER2.jpg" alt="La Revista Digital de los Organismos de Control Externo de Mendoza" />
</div>

<div class="d-flex justify-content-end gap-3 align-items-center me-5 mt-0">
    <label for="categoryFilter">Ver por Organismo de Control</label>

    <select id="categoryFilter" name="category" class="form-select w-25">
        <option value="">Todas</option>
        @foreach (var category in ViewBag.Categories as List<NoticeCategory> ?? new List<NoticeCategory>())
        {
            var categoryValue = category.ToString();
            var categoryName = category.GetType()
            .GetMember(category.ToString())[0]
            .GetCustomAttributes(typeof(DisplayAttribute), false)
            .FirstOrDefault() is DisplayAttribute displayAttribute
            ? displayAttribute.Name
            : categoryValue;

            <option value="@categoryValue" selected="@(selectedCategory == categoryValue ? "selected" : null)">
                @categoryName
            </option>
        }
    </select>
    <button id="filterButton" class="btn naranja mt-2">Filtrar</button>

</div>


@if (!string.IsNullOrEmpty(searchTerm))
{
    <p class="text-center mt-4">Resultados de la búsqueda: <strong>@searchTerm</strong></p>
}

@if (!(Model.Data?.Any() ?? false))
{
    <p class="alert alert-danger m-3">
        No se encontraron noticias. <a class="alert-link" href="@Url.Action("Index", "Home")">Volver a la página principal</a>
    </p>
}

<div class="text-center notice-container pt-5">
    @foreach (var notice in Model.Data)
    {
        <a href="@Url.Action("Detail", "Home", new { id = notice.Id })" class="notice-link">
            <article class="notice">
                <div class="img-notice-container rounded-2">
                    <img class="img-fluid w-100 rounded-2" src="~/@notice.Img.TrimStart('/') " alt=@notice.Title>
                </div>
                <div class="title-notice w-75 rounded-2 @(GetCategoryTitleCssClass(notice.Category))">
                    <h5 class="text-naranja">@notice.Issue.ToUpper()</h5>
                    <h2 class="editorial">@notice.Title</h2>
                </div>
            </article>
        </a>
    }
</div>

<div class="mb-5 text-center container d-flex justify-content-center">
    @if (Model.TotalPages > 1)
    {
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @if (Model.Page > 1)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Home", new { page = 1, searchTerm = searchTerm, category = selectedCategory })">Primera</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Home", new { page = Model.Page - 1, searchTerm = searchTerm, category = selectedCategory })">Anterior</a>
                    </li>
                }

                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(i == Model.Page ? "active" : "")">
                        <a class="page-link" href="@Url.Action("Index", "Home", new { page = i, searchTerm = searchTerm, category = selectedCategory })">@i</a>
                    </li>
                }

                @if (Model.Page < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Home", new { page = Model.Page + 1, searchTerm = searchTerm, category = selectedCategory })">Siguiente</a>
                    </li>
                    <li class="page-item">
                        <a class="page-link" href="@Url.Action("Index", "Home", new { page = Model.TotalPages, searchTerm = searchTerm, category = selectedCategory })">Última</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@section Scripts {
    <script>
        document.getElementById('filterButton').addEventListener('click', function () {
            var selectedCategory = document.getElementById('categoryFilter').value;
            window.location.href = '@Url.Action("Index", "Home")?searchTerm=' + '@searchTerm' + '&category=' + selectedCategory; // Order matters for query string
        });

        // Keep selected category after paging
        const urlParams = new URLSearchParams(window.location.search);
        const categoryParam = urlParams.get('category');
        if (categoryParam) {
            document.getElementById('categoryFilter').value = categoryParam;
        }

    </script>
}


@functions
{

    string GetCategoryTitleCssClass(NoticeCategory category)
    {
        switch (category)
        {
            case NoticeCategory.tribunal:
                return "title-notice-tribunal";
            case NoticeCategory.fiscalia:
                return "title-notice-fiscalia";
            case NoticeCategory.etica:
                return "title-notice-etica";
            default:
                return "title-notice";
        }
    }
}